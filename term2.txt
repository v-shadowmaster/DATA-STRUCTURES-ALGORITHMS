Dynamic Programming [patterns and problems]
     c) 2 dimenstional / 3 dimenstional DP and DP on grids
        -[] Ninja's Training (DP 7)
        -[] Grid Unique Paths : DP on Grids (DP8)
        -[] Grid Unique Paths 2 (DP 9)
        -[] Minimum path sum in Grid (DP 10)
        -[] Minimum path sum in Triangular Grid (DP 11)
        -[] Minimum/Maximum Falling Path Sum (DP-12)
        -[] 3-d DP : Ninja and his friends (DP-13)
    d) DP on subsequence
        -[] Subset sum equal to target (DP- 14)
        -[] Partition Equal Subset Sum (DP- 15)
        -[] Partition Set Into 2 Subsets With Min Absolute Sum Diff (DP- 16)
        -[] Count Subsets with Sum K (DP - 17)
        -[] Count Partitions with Given Difference (DP - 18)
        -[] Assign Cookies
        -[] Minimum Coins (DP - 20)
        -[] Target Sum (DP - 21)
        -[] Coin Change 2 (DP - 22)
        -[] Unbounded Knapsack (DP - 23)
        -[] Rod Cutting Problem | (DP - 24)
    e) DP on strings
        -[] Longest Common Subsequence | (DP - 25)
        -[] Print Longest Common Subsequence | (DP - 26)
        -[] Longest Common Substring | (DP - 27)
        -[] Longest Palindromic Subsequence | (DP-28)
        -[] Minimum insertions to make string palindrome | DP-29
        -[] Minimum Insertions/Deletions to Convert String | (DP- 30)
        -[] Shortest Common Supersequence | (DP - 31)
        -[] Distinct Subsequences| (DP-32)
        -[] Edit Distance | (DP-33)
        -[] Wildcard Matching | (DP-34)
    f) DP on stocks
        -[] Best Time to Buy and Sell Stock |(DP-35)
        -[] Buy and Sell Stock - II|(DP-36)
        -[] Buy and Sell Stocks III|(DP-37)
        -[] Buy and Stock Sell IV |(DP-38)
        -[] Buy and Sell Stocks With Cooldown|(DP-39)
        -[] Buy and Sell Stocks With Transaction Fee|(DP-40)
    g) Dp on Longest Inscreasing Subsequence
        -[] Longest Increasing Subsequence |(DP-41)
        -[] Printing Longest Increasing Subsequence|(DP-42)
        -[] Longest Increasing Subsequence |(DP-43)
        -[] Largest Divisible Subset|(DP-44)
        -[] Longest String Chain|(DP-45)
        -[] Longest Bitonic Subsequence |(DP-46)
        -[] Number of Longest Increasing Subsequences|(DP-47)
    h) Matrix Chain multiplication / Partition DP
        -[] Matrix Chain Multiplication|(DP-48)
        -[] Matrix Chain Multiplication | Bottom-Up|(DP-49)
        -[] Minimum Cost to Cut the Stick|(DP-50)
        -[] Burst Balloons|(DP-51)
        -[] Evaluate Boolean Expression to True|(DP-52)
        -[] Palindrome Partitioning - II|(DP-53)
        -[] Partition Array for Maximum Sum|(DP-54)
    i) DP on squares
        -[] Maximum Rectangle Area with all 1's|(DP-55)
        -[] Count Square Submatrices with All Ones|(DP-56)
        
Tries 
    a) theory
        -[] Implement TRIE | INSERT | SEARCH | STARTSWITH
    b) problems
        -[] Implement Trie - 2 (Prefix Tree)
        -[] Longest String with All Prefixes
        -[] Number of Distinct Substrings in a String
        -[] Bit PreRequisites for TRIE Problems
        -[] Maximum XOR of two numbers in an array
        -[] Maximum XOR With an Element From Array

Strings
    a) Hard Problems
        -[] Minimum number of bracket reversals needed to make an expression balanced
        -[] Count and say
        -[] Hashing In Strings | Theory
        -[] Rabin Karp
        -[] Z-Function
        -[] KMP algo / LPS(pi) array
        -[] Shortest Palindrome
        -[] Longest happy prefix
        -[] Count palindromic subsequence in given string

Binary-search
    b) binary search on answers
        -[] find square root of a number in log n
        -[] find the Nth root a number using binary search
        -[] koko eating bananas
        -[] minimum days to make M bouquets
        -[] find the smallest divisor
        -[] capacity to ship packages within D days
        -[] find the smallest divisor
        -[] aggressive cows
        -[] bool allocation problems
        -[] split array - largest sum
        -[] painter's partition
        -[] minimize max distance to gas station
        -[] median of 2 sorted array
        -[] kth element of two sorted array
    c) binary search on 2D arrays
        -[] find the row with maximum number of 1's
        -[] search in a 2D matrix
        -[] search in a row and column wise sorted matrix
        -[] find peek element(2D array)
        -[] matrix median

Recursion
    b) subsequent patterns
        [] generate all binary strings
        [] generate parenthesis
        [] print all subsequences / powerset
        [] learn all patterns of subsequences(theory)
        [] count all subsequences with sum K
        [] combination sum
        [] combination sum 2
        [] subset sum-1
        [] subset sum-2
        [] subset sum-3
        [] combination sum-3
        [] letter combination of a phone number
    c) string out all combos / hard
        [] palindrome partitioning
        [] word search
        [] N queens
        [] rat in a maze
        [] word break
        [] M coloring problem
        [] Sudoko solver
        [] expression add operators

Heaps
    b) medium problems
        -[] Kth largest element in an array using priority queues
        -[] Kth smallest element in an array using priority queues
        -[] sort K sorted array
        -[] sort M sorted lists
        -[] replace each array element by its corresponding rank
        -[] task schedular
        -[] hands on straights
    c) hard problems
        -[] design twitter
        -[] connect 'n' ropes with minimum cost
        -[] Kth largest element in a stream of running integers
        -[] maximum sum combination
        -[] find median from data stream
        -[] K most frequent elements

Binary-trees
    c) hard problems
        -[] root to node path in binary tree
        -[] LCA in binary tree
        -[] maximum width of a binary tree
        -[] check for children sum property
        -[] print all nodes at a distance of K in a binary tree
        -[] minimum time taken to BURN the binary tree from a node
        -[] count total nodes in a COMPLETE binary tree
        -[] requirement needed to construct a unique binary tree(theory)
        -[] construct binary tree from inorder and preorder
        -[] construct binary tree from postordr and inorder traversal
        -[] serialize and deserialize binary tree
        -[] Morris preorder traversal of a binary tree
        -[] Morris inorder traversal of a binary tree
        -[] flatten binary tree to linked-list

Graphs
    d) shortest path algorithm and problems
        -[] shortest path in UG with unit weight
        -[] shortest path in DAG
        -[] Djisktra's Algorithm
        -[] Why priority Queue is used in Djisktra's Algorithm
        -[] Shortest path in a binary maze
        -[] Path with minimum effort
        -[] Cheapest flights within k stops
        -[] Network Delay time
        -[] Number of ways to arrive at destination
        -[] Minimum steps to reach end from start by performing multiplication and mod operations with array elements
        -[] Bellman Ford Algorithm
        -[] Floyd Warshal Algorithm
        -[] Find the city with the smallest number of neighbors in a threshold distance
    e) Minimum spaning tree / Disjoint set and problems
        -[] Minimum Spanning Tree
        -[] Prim's Algorithm
        -[] Disjoint Set [Union by Rank]
        -[] Disjoint Set [Union by Size]
        -[] Kruskal's Algorithm
        -[] Number of operations to make network connected
        -[] Most stones removed with same rows or columns
        -[] Accounts merge
        -[] Number of island II
        -[] Making a Large Island
        -[] Swim in rising water
    f) Other algorithms
        -[] Bridges in Graph
        -[] Articulation Point
        -[] Kosaraju's Algorithm

1): Solve problems on arrays (easy -> medium -> hard)
    b) Medium 
        -[] count subarrays with the given sum
    c) Hard
        -[] pascal's triangle
        -[] largest subarray with 0 sum
        -[] count number of subarray with given xor K
        -[] merge overlapping subintervals
        -[] merge two sorted array without extra space
        -[] find the repeating and missing number
        -[] count inversions
        -[] reverse pairs
        -[] maximum product subarrays