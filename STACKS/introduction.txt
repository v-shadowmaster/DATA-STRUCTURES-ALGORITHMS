XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX            S T A C K S - L I F O             XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

1) What is a Stack?

 - A stack is a linear data structure that follows the LIFO (Last In, First Out) principle.

2) Key Characteristics

 - LIFO behavior: The last element inserted is the first one to be removed
 - One-end operations: Both insertion (push) and deletion (pop) happen at the same end — the top.

   Stack Example (Top at right):
   [10, 20, 30] → Top = 30

   Push(40) → [10, 20, 30, 40]
   Pop()    → [10, 20, 30] (returns 40)

3) Application of stacks in DSA

  | Problem Area                        | Use of Stack                      |
  | ----------------------------------- | --------------------------------- |
  | Expression Parsing                  | Convert Infix → Postfix, evaluate |
  | Recursion                           | Implicit call stack               |
  | Undo Mechanisms                     | Ctrl + Z in editors               |
  | Balanced Parentheses                | Validation using stack            |
  | Backtracking Algorithms             | DFS, maze solving                 |
  | Stock Span / Histogram Problems     | Monotonic stack                   |

4) Stack Implementation in C++

	#include<iostream>
	#define MAX 300
	using namespace std;

	class Stack {
	   int arr[MAX];
	   int top;

	   public :
	       Stack() { top = -1; }

	       bool push(int x){
	          if(top >= MAX - 1){
		     cout<<"Stack Overflow\n";
		     return false;
		  }
		  arr[++top] = x;
		  return true;
	       }

	       int pop(){
	          if(top < 0 ) {
		   cout<<"Stack overflow"<<endl;
		   }
		return arr[top--];
	       }

	       int peek(){
	         if(top < 0 ) {
		    cout<<"Stack Empty"<<endl;
		    return -1;
		    }
		return arr[top];
		}

		bool isEmpty() {return top == -1; }
	};


5) STL Stack Operations

	| Method    | Description                         |
	| --------- | ----------------------------------- |
	| push(x)   | Add x to top                        |
	| pop()     | Remove top                          |
	| top()     | Return top element                  |
	| empty()   | Returns true if stack is empty      |
	| size()    | Returns number of elements in stack |


6) Stack Internals (Memory & Time)

	Internally uses a deque in STL (std::stack<T>).
	All operations are O(1) average time.
	Memory: O(n) for n elements.

7) Time & Space Complexity Summary
	
	| Operation | Time Complexity       | Space Complexity |
	| --------- | --------------------- | ---------------- |
	| Push      | O(1)                  | O(1)             |
	| Pop       | O(1)                  | O(1)             |
	| Top       | O(1)                  | O(1)             |
	| isEmpty   | O(1)                  | O(1)             |
	| getMin    | O(1) with extra stack | O(n)             |

8) Best Practices

	Always check empty() before top() or pop() to avoid runtime errors.
	Use std::stack for quick implementations.
	When solving problems like histogram area or spans, think of using monotonic stacks.
	In recursive functions, beware of stack overflow for deep call stacks. Consider converting to iterative with stack.

9) Summary Table

	| Feature             | Description                               |
	| ------------------- | ----------------------------------------- |
	| Data Structure Type | Linear (LIFO)                             |
	| Access Allowed At   | Top only                                  |
	| Useful For          | Backtracking, parsing, expression eval    |
	| STL Class           | `std::stack<T>`                           |
	| Core Operations     | `push()`, `pop()`, `top()`, `empty()`     |
	| Common Problems     | Balanced parentheses, NGE, Min Stack, DFS |


10) Problems

	- Easy Problems on Stack Data Structures

		[] - The Celebrity Problem
		[] - Implement Queue using Stacks
		[] - Implement two stacks in an array
		[] - Implement Stack using Queues
		[] - Stack using priority queue or heap
		[] - Stack using single queue
		[] - Infix to Postfix
		[] - Prefix to Infix
		[] - Prefix to Postfix
		[] - Postfix to Prefix
		[] - Postfix to Infix
		[] - Infix To Prefix
		[] - Check for balanced parentheses
		[] - Arithmetic Expression Evalution
		[] - Evaluation of Postfix Expression
		[] - Reverse a stack using recursion
		[] - Reverse Words
		[] - Reverse a string using stack
		[] - Reversing a Queue
		[] - Reversing the first K of a Queue
		[] - A Data Structure with O(1) Operations

	- Medium Problems on Stack Data Structures

		[] - k Stacks in an Array
		[] - Mergable Stack
		[] - Previous Smaller Element
		[] - Next Greater Element
		[] - Stock Span Problem
		[] - Buildings Facing Sun
		[] - Next Smaller of next Greater in an array
		[] - Next Greater Frequency Element
		[] - Max product of indexes of greater on left and right
		[] - Iterative Tower of Hanoi
		[] - Sort a stack using a temporary stack
		[] - Reverse a stack without using extra space in O(n)
		[] - Delete middle of a stack
		[] - Check if a queue can be sorted into another queue
		[] - Check if an array is stack sortable
		[] - Iterative Postorder Traversal | Set 1 (Using Two Stacks)
		[] - Index of closing bracket for a given opening bracket
		[] - Max Diff between nearest left and right smaller elements
		[] - Delete consecutive same words in a sequence

	- Hard Problems on Stack Data Structures

		[] - Largest Rectangular Area in a Histogram
		[] - Sum of Max of all Subarrays
		[] - Max of Mins of every window size
		[] - Design a stack that supports getMin()
		[] - Design a stack with max frequency operations
		[] - Print next greater number of Q queries
		[] - Length of the longest valid substring
		[] - Iterative Postorder Traversal | Set 2 (Using One Stack)
		[] - Print ancestors of a given binary tree node without recursion
		[] - Expression contains redundant bracket or not
		[] - Find if an expression has duplicate parenthesis
		[] - Iterative method to find ancestors in a binary tree
		[] - Stack Permutations
		[] - Remove brackets from an algebraic string containing + and – operators
		[] - Range Queries for Longest Correct Bracket Subsequence

